import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Calendar;
import java.util.Random;

public class PhysLayerClient {
	public static int LAST_BIT = 0;

	public static void main(String[] args) throws UnknownHostException, IOException {
		// TODO Auto-generated method stub
		double preambleAverage = 0;
		int[] byteStream = new int[64];
		byte[] decodedBytes = new byte[32];
		byte [] encodedBytes = makeBytes();
		for(int i = 0; i < encodedBytes.length; i++)
		{
			System.out.printf("%x", encodedBytes[i]);
		}
		int decodeIndex = 0;
		int byteStreamIndex = 0;
		try (Socket socket = new Socket("cs380.codebank.xyz", 38001)) {
			InputStream input = socket.getInputStream();
			int counter = 1;
			
			int inputVal = 0;
			for (int i = 0; i < 64; i++) {
				//System.out.println(i);
				inputVal = input.read();
				preambleAverage += inputVal;
				
			}
			preambleAverage = preambleAverage / 64;
			System.out.println("\n"+preambleAverage);
			//int counter = 0;
			int byteRead = 0b0000000;
			for (int i = 0; i < 32; i++) {
				int []readBits = new int[5];
				for(int j = 0; j < readBits.length; j++)
				{
					readBits[j] = input.read();
				}
				int decodedByte1 = bitConversion(NRZIdecoding(readBits, preambleAverage));
				for(int j = 0; j < readBits.length; j++)
				{
					readBits[j] = input.read();
					
				}
				int decodedByte2 = bitConversion(NRZIdecoding(readBits, preambleAverage));
				decodedByte1 = decodedByte1 << 4;
				int combinedByte = decodedByte1 ^ decodedByte2; 
				System.out.printf("%x", combinedByte);
				/*readBits = null;
				// System.out.println("I= " + i);
				if (counter == 5) {
					byteStream[byteStreamIndex] = bitConversion(byteRead);
					System.out.printf("Value: %x\n", byteStream[byteStreamIndex]);
					byteStreamIndex++;
					byteRead = 0;
					counter = 0;

				}
				inputVal = input.read();
				//System.out.println("input= " + inputVal + " I= " + i);

				if (i == 0) {
					if (inputVal > preambleAverage) {
						byteRead = 1;
						lastBit = 1;

					}
					counter++;
				} 
				else if (inputVal > preambleAverage) {
					if (lastBit == 1) {
						byteRead = byteRead << 1;
						lastBit = 0;
					} 
					else {
						byteRead = byteRead << 1;
						byteRead++;
						lastBit = 1;
					}
					counter++;
				} 
				else if(inputVal <= preambleAverage) 
				{
					if (lastBit == 1) {
						byteRead = byteRead << 1;
						byteRead += 1;
						lastBit = 1;
					} 
					else 
					{
						byteRead = byteRead << 1;
						lastBit = 0;
					}
					counter++;
				}
				
				 * if(counter == 4) { byteStream[byteStreamIndex] =
				 * bitConversion(byteRead); byteStreamIndex ++; byteRead = 0;
				 * counter = 0; } inputVal = input.read(); if(inputVal <
				 * preambleAverage) { byteRead = byteRead << 1; counter ++; }
				 * else { byteRead = byteRead << 1; byteRead += 1; counter++; }
				 * System.out.printf("%x\n", inputVal)
				 */
			}
			byteStream[byteStreamIndex] = bitConversion(byteRead);
			System.out.printf("Value: %x\n", byteStream[byteStreamIndex]);
			counter = 0;
			for (int i = 0; i < 32; i++) {
				int byte1 = byteStream[counter];
				int byte2 = byteStream[counter + 1];
				byte1 = byte1 << 4;
				decodedBytes[i] = (byte) (byte1 ^ byte2);
				counter += 2;

			}
			OutputStream os = socket.getOutputStream();
			os.write(decodedBytes);

			if (input.read() == 1) {
				System.out.println("It Works");
			}
			System.out.println("de");
		}

	}
	public static int NRZIdecoding(int []bits, double preamble)
	{
		int retVal = 0;
		boolean signal = true;
		for(int i = 0; i < bits.length; i++)
		{
			if (PhysLayerClient.LAST_BIT == -99)
			{
				if(bits[i] > preamble)
				{
					signal = true;
					retVal = retVal << 1;
					retVal += 1;
					PhysLayerClient.LAST_BIT = 1;
				
				}
				else
				{
					signal = false;
					retVal = retVal << 1;
					PhysLayerClient.LAST_BIT = 0;
				}
			}
			else if (bits[i] > preamble)
			{
				if(PhysLayerClient.LAST_BIT == 1)
				{
					signal = false;
					retVal = retVal << 1;
					PhysLayerClient.LAST_BIT = 0;
				}
				else
				{
					signal = true;
					retVal = retVal << 1;
					retVal += 1;
					
					PhysLayerClient.LAST_BIT = 1;
				}
			}
			else if(bits[i] < preamble)
			{
				if(PhysLayerClient.LAST_BIT == 1)
				{
					signal = true;
					retVal = retVal << 1;
					retVal += 1;
					PhysLayerClient.LAST_BIT = 1;
				}
				else
				{
					signal = false;
					retVal = retVal << 1;
					PhysLayerClient.LAST_BIT = 0;
				}
			}
			
		}
		return retVal;
	}

	

	public static int bitConversion(int value) {
		//System.out.println(Integer.toBinaryString(value));
		int retVal = 0b00000000;
		if (value == 0b00011110) {
			return 0b00000000;
		} else if (value == 0b00001001) {
			return 0b00000001;
		}
		else if (value == 0b00010100) {
			return 0b00000010;
		} 
		else if (value == 0b00010101) {
			return 0b00000011;
		} 
		else if (value == 0b00001010) {
			return 0b00000100;
		} 
		else if (value == 0b00001011) {
			return 0b00000101;
		} 
		else if (value == 0b00001110) {
			return 0b00000110;
		} 
		else if (value == 0b00001111) {
			return 0b00000111;
		} 
		else if (value == 0b00010010) {
			return 0b00001000;
		} 
		else if (value == 0b00010011) {
			return 0b00001001;
		} 
		else if (value == 0b00010110) {
			return 0b00001010;
		} 
		else if (value == 0b00010111) {
			return 0b00001011;
		} 
		else if (value == 0b00011010) {
			return 0b00001100;
		} 
		else if (value == 0b00011011) {
			return 0b00001101;
		} 
		else if (value == 0b00011100) {
			return 0b00001110;

		} else if (value == 0b00011101) {
			return 0b00001111;
		}

		return retVal;

	}
	private static byte[] makeBytes() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        long time = cal.getTimeInMillis();
        Random rand = new Random(time);
        byte[] bytes = new byte[32];
        rand.nextBytes(bytes);
        return bytes;
    }

}
